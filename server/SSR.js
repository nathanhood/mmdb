import fs from 'fs';
import { resolve } from 'path';
import React from 'react';
import { renderToString } from 'react-dom/server';
import { Provider } from 'react-redux';
import { ServerStyleSheet } from 'styled-components';
import createHistory from 'history/createMemoryHistory';


// Import all components
import App from 'containers/App';
import Dashboard from 'containers/Dashboard';
import configureStore from 'configureStore';

/**
 * Retrieve component to be rendered
 *
 * @param  {string} component
 * @return {object}
 */
const getComponent = (component) => {
    switch (component) {
        case 'Dashboard':
            return Dashboard;
        default:
            return null;
    }
};

/**
 * Retrieve the template generated by production webpack build,
 * inject rendered components and relevant CSS,
 * and return fully rendered HTML that is ready for browser
 *
 * @param  {string} html
 * @param  {string} criticalCSS
 * @return {string}
 */
function renderFullPage(html, criticalCSS) { // eslint-disable-line no-unused-vars
    const page = fs.readFileSync(resolve(process.cwd() + '/server/templates/index.html'));

    return eval('`' + page + '`'); // eslint-disable-line no-eval
}

export default (componentPath, data) => {
    const PageComponent = getComponent(componentPath);
    const sheet = new ServerStyleSheet();

    // Initial React state
    const INITIAL_STATE = {
        app: {
            PageComponent,
            SSR: true,
            showSearch: false,
            toggleSearch: () => {},
        },
    };

    // Create redux store with history
    const HISTORY = createHistory();
    const STORE = configureStore({ ...INITIAL_STATE, ...data }, HISTORY, true);
    const html = renderToString(sheet.collectStyles(
        <Provider store={STORE}>
            <App />
        </Provider>
    ));

    return renderFullPage(html, sheet.getStyleTags());
};
