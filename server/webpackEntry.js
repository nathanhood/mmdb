import fs from 'fs';
import { resolve } from 'path';
import React from 'react';
import { renderToString } from 'react-dom/server';
import { Provider } from 'react-redux';
import { ThemeProvider, ServerStyleSheet } from 'styled-components';
import PropTypes from 'prop-types';
import createHistory from 'history/createMemoryHistory';


// Import all components
import Dashboard from 'containers/Dashboard';
import Header from 'components/Header';
import configureStore from 'configureStore';
import theme from 'variables';


// Create redux store with history
const INITIAL_STATE = {};
const HISTORY = createHistory();
const STORE = configureStore(INITIAL_STATE, HISTORY, true);


const App = (props) => (
    <Provider store={STORE}>
        <ThemeProvider theme={theme}>
            <div>
                <Header />
                {props.children}
            </div>
        </ThemeProvider>
    </Provider>
);

App.propTypes = {
    children: PropTypes.element
};

/**
 * Retrieve the template generated by production webpack build,
 * inject rendered components and relevant CSS,
 * and return fully rendered HTML that is ready for browser
 *
 * @param  {string} html
 * @param  {string} criticalCSS
 * @return {string}
 */
function renderFullPage(html, criticalCSS) { // eslint-disable-line no-unused-vars
    const page = fs.readFileSync(resolve(process.cwd() + '/server/templates/index.html'));

    return eval('`' + page + '`'); // eslint-disable-line no-eval
}

export default () => {
    const sheet = new ServerStyleSheet();
    const html = renderToString(sheet.collectStyles(<App><Dashboard /></App>));

    return renderFullPage(html, sheet.getStyleTags());
};
